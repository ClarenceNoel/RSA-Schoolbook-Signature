import random

def generate_keypair(bits):
    # Step 1: Choose two large prime numbers, p and q
    p = generate_large_prime(bits)
    q = generate_large_prime(bits)
    
    # Step 2: Compute n = p * q
    n = p * q
    
    # Step 3: Compute the totient (Euler's totient function), phi(n)
    phi_n = (p - 1) * (q - 1)
    
    # Step 4: Choose e, a number coprime to phi(n) and 1 < e < phi(n)
    e = choose_coprime(phi_n)
    
    # Step 5: Compute d, the modular multiplicative inverse of e (mod phi(n))
    d = modular_inverse(e, phi_n)
    
    return ((n, e), (n, d))

def generate_large_prime(bits):
    # Function to generate a large prime number with a specified number of bits
    while True:
        potential_prime = random.getrandbits(bits)
        if is_prime(potential_prime):
            return potential_prime

def is_prime(n, k=5):
    # Miller-Rabin primality test
    if n <= 1:
        return False
    if n == 2 or n == 3:
        return True
    if n % 2 == 0:
        return False

    r, s = 0, n - 1
    while s % 2 == 0:
        r += 1
        s //= 2

    for _ in range(k):
        a = random.randint(2, n - 2)
        x = pow(a, s, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

def choose_coprime(phi_n):
    # Function to choose a random coprime to phi_n
    while True:
        e = random.randint(2, phi_n - 1)
        if gcd(e, phi_n) == 1:
            return e

def gcd(a, b):
    # Euclidean algorithm to compute GCD
    while b:
        a, b = b, a % b
    return a

def modular_inverse(a, m):
    # Extended Euclidean Algorithm to compute modular inverse
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1

def rsa_sign(message, private_key):
    n, d = private_key
    signature = pow(message, d, n)
    return signature

def rsa_verify(message, signature, public_key):
    n, e = public_key
    decrypted_signature = pow(signature, e, n)
    return decrypted_signature == message

# Example usage:
bits = 1024
private_key, public_key = generate_keypair(bits)

message = 42
signature = rsa_sign(message, private_key)
verification_result = rsa_verify(message, signature, public_key)

print(f"Message: {message}")
print(f"Signature: {signature}")
print(f"Verification Result: {verification_result}")
